{"version":3,"sources":["components/ButtonCP.jsx","components/EditText.jsx","components/EditTextPassword.jsx","repository/login.js","components/CardConnectIFrame.jsx","repository/transaction.js","VirtualTerminal.jsx","App.js","index.js"],"names":["ButtonCP","text","style","onPress","TouchableOpacity","View","styles","button","Text","buttonText","StyleSheet","create","minWidth","backgroundColor","borderRadius","paddingHorizontal","paddingVertical","elevation","color","alignSelf","EditText","placeholder","keyboardType","onChangeText","value","onBlur","multiline","maxLength","useState","textInput","newStyle","setNewStyle","TextInput","autoFocus","onFocus","e","textInputFocus","label","marginTop","textAlign","marginStart","marginBottom","fontSize","borderColor","borderWidth","height","outlineStyle","EditTextPassword","showPassword","setShowPassword","icon","setIcon","container","secureTextEntry","MaterialIcons","name","size","flexDirection","alignItems","flex","URL","headers","tenantName","DEVICE_OS","DEVICE_ID","TIMEZONE","IP_ADDRESS","login","username","password","details","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","Object","assign","body","then","response","json","webViewContainer","width","overflow","executeTrx","accessToken","cardConnectToken","undefined","cvv","amount","month","year","billingAddress","city","state","zip","email","field","access_token","JSON","stringify","catch","error","VirtualTerminal","token","type","phoneNumber","expirationDate","setDetails","wait","setWait","process","alert","useEffect","ScrollView","subContaier","margin","prev","test","toString","console","log","marginHorizontal","marginEnd","ActivityIndicator","buttonMargin","justifyContent","App","setUsername","setPassword","setToken","loginHandler","trim","length","passwordMargin","AppRegistry","registerComponent","runApplication","rootTag","document","getElementById"],"mappings":"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","file":"static/js/app.e741d6e1.chunk.js","sourcesContent":["import { StyleSheet, View, Text, TouchableOpacity } from \"react-native\";\r\n\r\nexport function ButtonCP({ text, style, onPress }) {\r\n  return (\r\n    <TouchableOpacity onPress={onPress}>\r\n      <View style={[styles.button, style]}>\r\n        <View>\r\n          <Text style={styles.buttonText}>{text}</Text>\r\n        </View>\r\n      </View>\r\n    </TouchableOpacity>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  button: {\r\n    minWidth: 200,\r\n    backgroundColor: \"#01786E\",\r\n    borderRadius: 8,\r\n    paddingHorizontal: 16,\r\n    paddingVertical: 16,\r\n    elevation: 8,\r\n  },\r\n  buttonText: {\r\n    color: \"#FFF\",\r\n    alignSelf: \"center\",\r\n  },\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { StyleSheet, Text, TextInput } from \"react-native\";\r\nexport function EditText({\r\n  placeholder,\r\n  keyboardType,\r\n  style,\r\n  onChangeText,\r\n  value,\r\n  onBlur,\r\n  multiline = false,\r\n  maxLength,\r\n}) {\r\n  const [newStyle, setNewStyle] = useState(styles.textInput);\r\n\r\n  return (\r\n    <TextInput\r\n      style={[newStyle, style]}\r\n      placeholder={placeholder}\r\n      keyboardType={keyboardType}\r\n      autoFocus={false}\r\n      maxLength={maxLength}\r\n      onBlur={() => {\r\n        onBlur;\r\n        setNewStyle(styles.textInput);\r\n      }}\r\n      onFocus={(e) => {\r\n        setNewStyle(styles.textInputFocus);\r\n      }}\r\n      onChangeText={(text) => onChangeText(text)}\r\n      multiline={multiline}\r\n      value={value}\r\n    />\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  label: {\r\n    marginTop: 16,\r\n    textAlign: \"left\",\r\n    marginStart: 20,\r\n    marginBottom: 4,\r\n    fontSize: 16,\r\n    alignSelf: \"flex-start\",\r\n  },\r\n  textInput: {\r\n    minWidth: 300,\r\n    borderColor: \"#A0A0A0\",\r\n    paddingHorizontal: 16,\r\n    borderWidth: 2,\r\n    height: 55,\r\n    fontSize: 16,\r\n    borderRadius: 4,\r\n    outlineStyle: \"none\",\r\n  },\r\n  textInputFocus: {\r\n    minWidth: 300,\r\n    borderWidth: 2,\r\n    height: 55,\r\n    fontSize: 16,\r\n    borderColor: \"#01786E\",\r\n    paddingHorizontal: 16,\r\n    borderRadius: 4,\r\n    outlineStyle: \"none\",\r\n  },\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { StyleSheet, TextInput, View } from \"react-native\";\r\nimport MaterialIcons from \"@expo/vector-icons/MaterialIcons\";\r\n\r\nexport function EditTextPassword({ placeholder, style, onChangeText, onBlur }) {\r\n  const [showPassword, setShowPassword] = useState(true);\r\n  const [icon, setIcon] = useState(\"visibility\");\r\n  const [newStyle, setNewStyle] = useState(styles.container);\r\n\r\n  return (\r\n    <View style={[newStyle, style]}>\r\n      <TextInput\r\n        style={styles.textInput}\r\n        placeholder={placeholder}\r\n        secureTextEntry={showPassword}\r\n        autoFocus={false}\r\n        onBlur={() => {\r\n          onBlur;\r\n          setNewStyle(styles.container);\r\n        }}\r\n        onFocus={(e) => {\r\n          setNewStyle(styles.textInputFocus);\r\n        }}\r\n        onChangeText={(text) => onChangeText(text)}\r\n      />\r\n      <MaterialIcons\r\n        name={icon}\r\n        size={24}\r\n        color=\"#CECECE\"\r\n        style={styles.icon}\r\n        onPress={() => {\r\n          setShowPassword(!showPassword);\r\n          if (icon === \"visibility\") setIcon(\"visibility-off\");\r\n          else setIcon(\"visibility\");\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  icon: {\r\n    paddingHorizontal: 16,\r\n  },\r\n  container: {\r\n    minWidth: 300,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    borderWidth: 2,\r\n    height: 55,\r\n    borderColor: \"#A0A0A0\",\r\n    borderRadius: 4,\r\n  },\r\n  textInput: {\r\n    paddingHorizontal: 16,\r\n    paddingVertical: 16,\r\n    fontSize: 16,\r\n    flex: 1,\r\n    outlineStyle: \"none\",\r\n  },\r\n  textInputFocus: {\r\n    minWidth: 300,\r\n    flexDirection: \"row\",\r\n    borderWidth: 2,\r\n    alignItems: \"center\",\r\n    borderRadius: 4,\r\n    height: 55,\r\n    borderColor: \"#01786E\",\r\n  },\r\n});\r\n","\r\nexport const URL = \"https://api.cloudpayments-staging.com/\";\r\nexport const headers = {\r\n  \"Content-Type\": \"application/json\",\r\n  \"API-KEY\": \"613a606b20808900019edcd6e0d540ed0f9243e89a7393fd0b46ae92\",\r\n  tenantName: \"IBANERA\",\r\n  DEVICE_OS: \"\",\r\n  DEVICE_ID: \"\",\r\n  TIMEZONE: \"\",\r\n  IP_ADDRESS: \"\",\r\n};\r\n\r\nexport const login = async (username, password) => {\r\n\r\n    var details = {\r\n        'username': username,\r\n        'password': password,\r\n        'grant_type': 'password'\r\n    };\r\n\r\n    var formBody = [];\r\n    for (var property in details) {\r\n        var encodedKey = encodeURIComponent(property);\r\n        var encodedValue = encodeURIComponent(details[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n    }\r\n    formBody = formBody.join(\"&\");\r\n\r\n    const response = await fetch(URL + \"auth/oauth/token\", {\r\n        method: \"POST\",\r\n        headers: Object.assign({}, headers, {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        }),\r\n        body: formBody,\r\n    }).then(response => response.json());\r\n\r\n    return response\r\n}","import { StyleSheet, View } from \"react-native\";\r\nimport WebView from \"react-native-webview\";\r\n\r\nconst html = `\r\n    <iframe id=\"tokenframe\" name=\"tokenframe\" frameborder=\"0\" width=\"100%\" style=\"height: 192px;\" scrolling=\"no\"></iframe>\r\n        <script language=\"JavaScript\">\r\n        document.getElementById(\"tokenframe\").src = \"${\"https://boltgw.cardconnect.com:6443\"}/itoke/ajax-tokenizer.html\" +\r\n                \"?tokenizewheninactive=true&usecvv=true&formatinput=true&cardnumbernumericonly=true&usemonthnames=true&cardinputmaxlength=19&invalidinputevent=true&unique=false&autofocus=true\" +\r\n                \"&css=input%7Bcaret-color%3A%20%2345b29d%3Bwidth%3A%2096%25%3Bheight%3A%2045px%3Bborder-radius%3A4px%3Bborder%3A%202.1px%20solid%20%23A0A0A0%3Bfont-size%3A16px%3Bpadding-left%3A10px%3Bbackground-color%3A%23FFFFFFFF%3Bmargin-bottom%3A15px%3Bmargin-top%3A6px%7Dinput%3Afocus%7Boutline%3A%20none%20!important%3B%20border-color%3A%20%2345b29d%3Bcaret-color%3A%20%2345b29d%3B%7D\" \r\n                \r\n                window.addEventListener('message', function (event) {\r\n                var result = JSON.parse(event.data); \r\n                if ((result.validationError === undefined || result.validationError === \\\"\\\") && result.message !== \\\"\\\"){\r\n                    window.ReactNativeWebView.postMessage( result.message) \r\n                } else{\r\n                    //window.ReactNativeWebView.postMessage(result.validationError);\r\n                }\r\n                }, false);\r\n    \r\n    </script>\r\n    `;\r\nfunction CardConnectIFrame({ isLoading, cardConnectToken }) {\r\n  return (\r\n    <View style={styles.webViewContainer}>\r\n      <WebView\r\n        scalesPageToFit={false}\r\n        bounces={false}\r\n        scrollEnabled={false}\r\n        injectedJavaScript={`const meta = document.createElement('meta'); meta.setAttribute('content', 'width=width, initial-scale=0.9, maximum-scale=0.9, user-scalable=\"no\"'); meta.setAttribute('name', 'viewport'); document.getElementsByTagName('head')[0].appendChild(meta); `}\r\n        style={styles.backgroundColor}\r\n        source={{ html }}\r\n        onLoadStart={() => {\r\n          isLoading(true);\r\n        }}\r\n        onLoadEnd={() => {\r\n          isLoading(false);\r\n        }}\r\n        onMessage={(event) => {\r\n          cardConnectToken(event.nativeEvent.data);\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  backgroundColor: {},\r\n  webViewContainer: {\r\n    width: \"98%\",\r\n    height: 185,\r\n    backgroundColor: \"red\",\r\n    overflow: \"hidden\",\r\n  },\r\n});\r\nexport default CardConnectIFrame;\r\n","import { headers, URL } from \"./login\";\r\n\r\nconst getCardType =(token) => {\r\n    return \"VISA\";\r\n    const first = +token.substring(1, 2)\r\n    const second = +token.substring(2, 3)\r\n    let cardType;\r\n    switch (first) {\r\n        case 4: cardType = \"VISA\"; break\r\n        case 5: cardType = \"MASTERCARD\"; break\r\n        case 3:{\r\n            switch (second) {\r\n                case 7: cardType = \"AMERICANEXPRESS\"; break\r\n                case 0, 8: cardType = \"DINERS\"; break;\r\n                default: cardType = \"JCB\"\r\n            }\r\n        } \r\n        default: cardType =\"DISCOVER\";\r\n    }\r\n\r\n    return cardType\r\n}\r\n\r\nexport const executeTrx = async (accessToken, details) => {\r\n\r\n    let body = {\r\n        \"contextRequest\": {},\r\n        \"details\": {\r\n            \"name\": \"NONACCOUNT\",\r\n            \"details\":{\r\n                \"name\": \"CVT\",\r\n                \"field\":[\r\n                    {\r\n                        \"key\":\"SP_accountNumberClear\",\r\n                        \"value\": details.cardConnectToken\r\n                    }, \r\n                    {\r\n                        \"key\":\"IS_CARD_TOKENIZED\",\r\n                        \"value\": details.cvv === undefined?\"YES\":\"NO\"\r\n                    },\r\n                    {\r\n                        \"key\":\"RSP_AC_CARD_TYPE\",\r\n                        \"value\": getCardType(details.cardConnectToken)\r\n                    },\r\n                    {\r\n                        \"key\":\"STORE_CUSTOMER_PROFILE\",\r\n                        \"value\":\"NO\"\r\n                    },\r\n                    {\r\n                        \"key\":\"RSP_AC_CARD_HOLDER_FULL_NAME\",\r\n                        \"value\": details.name\r\n                    },\r\n                    {\r\n                        \"key\":\"AMOUNT\",\r\n                        \"value\":details.amount\r\n                    },\r\n                    {\r\n                        \"key\":\"CURRENCY_CODE\",\r\n                        \"value\":\"840\"\r\n                    },\r\n                    {\r\n                        \"key\":\"RSP_AC_EXPIRE_MONTH\",\r\n                        \"value\": details.month\r\n                    },\r\n                    {\r\n                        \"key\":\"RSP_AC_EXPIRE_YEAR\",\r\n                        \"value\": details.year\r\n                    },\r\n                    {\r\n                        \"key\":\"RSP_AC_CARD_HOLDER_ADDRESS_LINE1\",\r\n                        \"value\": details.billingAddress\r\n                    },\r\n                    {\r\n                        \"key\":\"RSP_AC_CARD_HOLDER_ADDRESS_CITY\",\r\n                        \"value\":details.city\r\n                    },\r\n                    {\r\n                        \"key\":\"RSP_AC_CARD_HOLDER_ADDRESS_STATE\",\r\n                        \"value\": details.state\r\n                    },\r\n                    {\r\n                        \"key\":\"RSP_AC_CARD_HOLDER_ADDRESS_COUNTRY\",\r\n                        \"value\":\"US\"\r\n                    },\r\n                    {\r\n                        \"key\":\"RSP_AC_CARD_HOLDER_ADDRESS_POSTALCODE\",\r\n                        \"value\":details.zip\r\n                    },\r\n                    {\r\n                        \"key\":\"RSP_AC_CARD_HOLDER_EMAIL\",\r\n                        \"value\": details.email\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n\r\n    if(details.cvv !== undefined)\r\n        body.details.details.field.push({\r\n            'key': 'SP_AC_CREDIT_CARD_CVV',\r\n            'value': details.cvv\r\n        })\r\n\r\n    const response = await fetch(URL + \"fundz-ms/user/executeTrx\", {\r\n        method: \"POST\",\r\n        headers: Object.assign({}, headers, {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": `Bearer ${accessToken.access_token}`\r\n        }),\r\n        body: JSON.stringify(body),\r\n    }).then(response => response.text())\r\n    .catch(error => \"Please try it again.\");\r\n\r\n    return response\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n  ActivityIndicator,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n} from \"react-native\";\r\nimport { ButtonCP } from \"./components/ButtonCP\";\r\nimport CardConnectIFrame from \"./components/CardConnectIFrame\";\r\nimport { EditText } from \"./components/EditText\";\r\nimport { executeTrx } from \"./repository/transaction\";\r\n\r\nexport const VirtualTerminal = ({ token, type }) => {\r\n  const [details, setDetails] = useState({\r\n    name: \"\",\r\n    billingAddress: \"\",\r\n    city: \"\",\r\n    state: \"\",\r\n    zip: \"\",\r\n    email: \"\",\r\n    phoneNumber: \"\",\r\n    amount: 0,\r\n    expirationDate: \"\",\r\n    month: \"01\",\r\n    year: \"2023\",\r\n    cardConnectToken: \"\",\r\n    cvv: \"\",\r\n  });\r\n\r\n  const [wait, setWait] = useState(true);\r\n\r\n  const setName = (value) => {\r\n    setDetails((prev) => ({ ...prev, name: value }));\r\n  };\r\n\r\n  const setBillingAddress = (value) => {\r\n    setDetails((prev) => ({ ...prev, billingAddress: value }));\r\n  };\r\n\r\n  const setCity = (value) => {\r\n    setDetails((prev) => ({ ...prev, city: value }));\r\n  };\r\n\r\n  const setState = (value) => {\r\n    setDetails((prev) => ({ ...prev, state: value }));\r\n  };\r\n\r\n  const setZip = (value) => {\r\n    setDetails((prev) => ({ ...prev, zip: value }));\r\n  };\r\n\r\n  const setEmail = (value) => {\r\n    setDetails((prev) => ({ ...prev, email: value }));\r\n  };\r\n\r\n  const setPhoneNumber = (value) => {\r\n    if (/^\\d+$/.test(value.toString()))\r\n      setDetails((prev) => ({ ...prev, phoneNumber: value }));\r\n  };\r\n\r\n  const setCVV = (value) => {\r\n    console.log(/^\\d+$/.test(value.toString()));\r\n    if (/^\\d+$/.test(value.toString()))\r\n      setDetails((prev) => ({ ...prev, cvv: value }));\r\n  };\r\n\r\n  const setAmount = (value) => {\r\n    if (/^\\d+$/.test(value.toString()))\r\n      setDetails((prev) => ({ ...prev, amount: value }));\r\n  };\r\n\r\n  const setMonth = (value) => {\r\n    if (/^\\d+$/.test(value.toString()))\r\n      setDetails((prev) => ({ ...prev, month: value }));\r\n  };\r\n\r\n  const setYear = (value) => {\r\n    if (/^\\d+$/.test(value.toString()))\r\n      setDetails((prev) => ({ ...prev, year: value }));\r\n  };\r\n\r\n  const cardConnectCallBack = (value) => {\r\n    if (/^\\d+$/.test(value.toString()))\r\n      setDetails((prev) => ({ ...prev, cardConnectToken: value }));\r\n  };\r\n\r\n  const process = async () => {\r\n    setWait(true);\r\n    const response = await executeTrx(token, details);\r\n    alert(response);\r\n    setWait(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (type === \"FIS\") setWait(false);\r\n  }, []);\r\n\r\n  return (\r\n    <ScrollView style={styles.container}>\r\n      <View style={styles.subContaier}>\r\n        <EditText\r\n          placeholder=\"Name on card\"\r\n          keyboardType=\"default\"\r\n          style={styles.margin}\r\n          onChangeText={setName}\r\n        />\r\n        <EditText\r\n          placeholder=\"Billing Address\"\r\n          keyboardType=\"default\"\r\n          style={styles.margin}\r\n          onChangeText={setBillingAddress}\r\n          value={details.billingAddress}\r\n        />\r\n        <EditText\r\n          placeholder=\"City\"\r\n          keyboardType=\"default\"\r\n          style={styles.margin}\r\n          onChangeText={setCity}\r\n          value={details.city}\r\n        />\r\n        <EditText\r\n          placeholder=\"State\"\r\n          keyboardType=\"default\"\r\n          style={styles.margin}\r\n          onChangeText={setState}\r\n          value={details.state}\r\n        />\r\n        <EditText\r\n          placeholder=\"Zip / Postal Code\"\r\n          keyboardType=\"default\"\r\n          style={styles.margin}\r\n          onChangeText={setZip}\r\n          value={details.zip}\r\n        />\r\n        <EditText\r\n          placeholder=\"Email Address\"\r\n          keyboardType=\"email-address\"\r\n          style={styles.margin}\r\n          onChangeText={setEmail}\r\n          value={details.email}\r\n        />\r\n        <EditText\r\n          placeholder=\"Phone Number\"\r\n          keyboardType=\"numeric\"\r\n          style={styles.margin}\r\n          onChangeText={setPhoneNumber}\r\n          value={details.phoneNumber}\r\n        />\r\n        <EditText\r\n          placeholder=\"Card Number\"\r\n          keyboardType=\"numeric\"\r\n          style={styles.margin}\r\n          maxLength={16}\r\n          onChangeText={cardConnectCallBack}\r\n          value={details.cardConnectToken}\r\n        />\r\n        <EditText\r\n          maxLength={3}\r\n          placeholder=\"CVV\"\r\n          keyboardType=\"numeric\"\r\n          style={styles.margin}\r\n          onChangeText={setCVV}\r\n          value={details.cvv}\r\n        />\r\n        <View\r\n          style={{\r\n            flexDirection: \"row\",\r\n            marginHorizontal: 20,\r\n            marginTop: 8,\r\n          }}\r\n        >\r\n          <EditText\r\n            style={{ width: 146, minWidth: 146, marginEnd: 4 }}\r\n            maxLength={2}\r\n            keyboardType=\"numeric\"\r\n            onChangeText={setMonth}\r\n            value={details.month}\r\n          />\r\n          <EditText\r\n            style={{ width: 146, minWidth: 146, marginStart: 4 }}\r\n            maxLength={4}\r\n            keyboardType=\"numeric\"\r\n            onChangeText={setYear}\r\n            value={details.year}\r\n          />\r\n        </View>\r\n        <EditText\r\n          placeholder=\"Amount USD\"\r\n          keyboardType=\"numeric\"\r\n          style={styles.margin}\r\n          onChangeText={setAmount}\r\n          value={details.amount}\r\n        />\r\n        {wait ? (\r\n          <ActivityIndicator size={\"large\"} style={styles.buttonMargin} />\r\n        ) : (\r\n          <ButtonCP\r\n            text=\"Process Transaction\"\r\n            style={styles.buttonMargin}\r\n            onPress={process}\r\n          />\r\n        )}\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  margin: {\r\n    marginTop: 8,\r\n  },\r\n  buttonMargin: {\r\n    margin: 16,\r\n    marginTop: 32,\r\n  },\r\n  label: {\r\n    marginTop: 16,\r\n    textAlign: \"left\",\r\n    marginStart: 20,\r\n    marginBottom: 4,\r\n    fontSize: 16,\r\n    alignSelf: \"flex-start\",\r\n  },\r\n  subContaier: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginTop: 50,\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    width: \"100%\",\r\n  },\r\n});\r\n","\nimport { useState } from 'react';\nimport { ActivityIndicator, StyleSheet, View } from 'react-native';\nimport { ButtonCP } from './components/ButtonCP';\nimport { EditText } from './components/EditText';\nimport { EditTextPassword } from './components/EditTextPassword';\nimport { login } from './repository/login';\nimport { VirtualTerminal } from './VirtualTerminal';\n\nexport default function App() {\n\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [wait, setWait] = useState(false)\n  const [token, setToken] = useState()\n  const [type, setType] = useState()\n\n  const loginHandler = async () => {\n\n    if(username.trim().length === 0 || password.trim().length === 0 ){\n      return\n    }\n    setWait(true)\n\n    const response = await login(username, password)\n    console.log(response)\n    setWait(false)\n    if(response.access_token)\n      setToken(response)\n  }\n\n  return (\n    <View style={styles.container}>\n        {token === undefined? <>\n            <EditText placeholder=\"Username\" \n                keyboardType=\"email-address\" \n                style={styles.passwordMargin} \n                onChangeText={setUsername}\n                value={username} />\n            <EditTextPassword placeholder=\"Password\" \n                style={styles.passwordMargin} \n                onChangeText={setPassword} \n                value={password}/>\n            {wait? <ActivityIndicator size={'large'} style={styles.buttonMargin}/>:<ButtonCP text=\"Sign in\" style={styles.buttonMargin} onPress={loginHandler}/>}\n          </>\n          : <VirtualTerminal token={token} type={\"FIS\"}/>\n        }\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  buttonMargin: {\n      marginTop: 32\n  },\n  passwordMargin: {\n    marginTop: 8\n  },\n}\n);","import { AppRegistry } from \"react-native\";\n\nimport App from './App';\n\nAppRegistry.registerComponent(\"App\", () => App);\nAppRegistry.runApplication(\"App\", {\n  rootTag: document.getElementById(\"root\")\n});"],"sourceRoot":""}